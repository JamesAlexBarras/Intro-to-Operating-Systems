diff --git a/kern/include/synch.h b/kern/include/synch.h
index 14faf84..63f49bb 100644
--- a/kern/include/synch.h
+++ b/kern/include/synch.h
@@ -50,7 +50,7 @@ void              sem_destroy(struct semaphore *);
 
 struct lock {
 	char *name;
-	
+	struct thread *volatile holder;
 	// add what you need here
 	// (don't forget to mark things volatile as needed)
 };
diff --git a/kern/include/thread.h b/kern/include/thread.h
index b051467..3ac4033 100644
--- a/kern/include/thread.h
+++ b/kern/include/thread.h
@@ -90,6 +90,8 @@ void thread_sleep(const void *addr);
  */
 void thread_wakeup(const void *addr);
 
+void thread_wakeup_1(const void *addr);
+
 /*
  * Return nonzero if there are any threads sleeping on the specified
  * address. Meant only for diagnostic purposes.
diff --git a/kern/thread/synch.c b/kern/thread/synch.c
index ad95de6..1895169 100644
--- a/kern/thread/synch.c
+++ b/kern/thread/synch.c
@@ -133,37 +133,96 @@ void
 lock_acquire(struct lock *lock)
 {
 
+	//kprintf("oooooooooooooooooooooooooooooooooooo");
+	
+	
+	assert(lock != NULL);
+	//assert(lock->holder != NULL);
+	
+	int spl;
+	spl = splhigh();
+
+	if (lock_do_i_hold(lock)) {
+	panic("lock %s at %p: Deadlock\n", lock->name, lock);
+	}
+
+	while (lock->holder != NULL) {
+	thread_sleep(lock);
+	}
+
+	lock->holder = curthread;
+	splx(spl);
+
+
+
 
 
 
 
 	// Write this
 
-	(void)lock;  // suppress warning until code gets written
+	//(void)lock;  // suppress warning until code gets written
 }
 
 void
 lock_release(struct lock *lock)
 {
 
+	//assert(lock->holder != NULL);
+	assert(lock != NULL);
+
+	int spl;
+	spl = splhigh();
+
+	if (lock->holder != curthread) {
+	panic("lock %s at %p: Not holder.\n", lock->name, lock);
+	}
+
+	lock->holder = NULL;
+	thread_wakeup(lock);
+
+	splx(spl);
+
+
+
+
 
 
 
 	// Write this
 
-	(void)lock;  // suppress warning until code gets written
+//	(void)lock;  // suppress warning until code gets written
 }
 
 int
 lock_do_i_hold(struct lock *lock)
 {
 
-	
+	//assert(lock->holder != NULL);
+	assert(lock != NULL);
+
+	int spl, same;
+	spl = splhigh();
+
+	if (lock->holder == curthread) {
+		same = 1;
+	} else {
+	same = 0;
+	}
+
+	splx(spl);
+
+	return same;
+
+
+
+
+
 	// Write this
 
-	(void)lock;  // suppress warning until code gets written
+//	(void)lock;  // suppress warning until code gets written
 
-	return 1;    // dummy until code gets written
+//	return 1;    // dummy until code gets written
 }
 
 ////////////////////////////////////////////////////////////
@@ -208,33 +267,73 @@ cv_wait(struct cv *cv, struct lock *lock)
 {
 
 
+	assert(cv != NULL);
+	assert(lock != NULL);
+	
+	int spl;
+	spl = splhigh();
+
+	lock_release(lock);
+	thread_sleep(cv);
+	lock_acquire(lock);
+
+	splx(spl);
 
 
 
 
 
-	Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+	// Write this
+//	(void)cv;    // suppress warning until code gets written
+//	(void)lock;  // suppress warning until code gets written
 }
 
 void
 cv_signal(struct cv *cv, struct lock *lock)
 {
 
+	assert(cv != NULL);
+	assert(lock != NULL);
+
+	int spl;
+	spl = splhigh();
+
+	if (!lock_do_i_hold(lock)) {
+	panic("cv_signal error: cv %s at %p, lock %s at %p.\n", cv->name, cv, lock->name, lock);
+	}
+
+	thread_wakeup_1(cv);
+
+	splx(spl);
+
+
 
 
 	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+//	(void)cv;    // suppress warning until code gets written
+//	(void)lock;  // suppress warning until code gets written
 }
 
 void
 cv_broadcast(struct cv *cv, struct lock *lock)
 {
 
+	assert(cv != NULL);
+	assert(lock != NULL);
+
+	int spl;
+	spl = splhigh();
+
+	if (!lock_do_i_hold(lock)) {
+        panic("cv_broadcast error: cv %s at %p, lock %s at %p.\n", cv->name, cv, lock->name, lock);
+        }
+
+	thread_wakeup(cv);
+
+	splx(spl);
+
 
 	// Write this
-	(void)cv;    // suppress warning until code gets written
-	(void)lock;  // suppress warning until code gets written
+//	(void)cv;    // suppress warning until code gets written
+//	(void)lock;  // suppress warning until code gets written
 }
diff --git a/kern/thread/thread.c b/kern/thread/thread.c
index a493301..edbba1e 100644
--- a/kern/thread/thread.c
+++ b/kern/thread/thread.c
@@ -537,6 +537,27 @@ thread_wakeup(const void *addr)
 	}
 }
 
+void
+thread_wakeup_1(const void *addr)
+{
+	int i, result;
+
+	assert(curspl>0);
+
+	for (i=0; i<array_getnum(sleepers); i++) {
+		struct thread *t = array_getguy(sleepers, i);
+		if (t->t_sleepaddr == addr) {
+			array_remove(sleepers, i);
+			i--;
+			result = make_runnable(t);
+		
+			assert(result==0);
+			break;			
+		}
+	
+
+	}	
+}
 
 /*
  * Return nonzero if there are any threads who are sleeping on "sleep address"
